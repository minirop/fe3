#!/usr/bin/env python

import os

offsets = [
	# 878000
	0x8E982E, 0x8E982E, 0x8E994D, 0x8E9B41, 0x8E9B9C, 0x8E9C22, 0x8E9C60, 0x8E9CB8, 0x8E9CF5, 0x8E9D54, 0x8E9DD1, 0x8E9E86, 0x8E9FEA, 0x8EA02F, 0x8EA185, 0x8EA2A2, 0x8EA2E9, 0x8EA32D, 0x8EA375, 0x8EA520, 0x8EA5C1, 0x8EA5FB, 0x8EA750, 0x8EA796, 0x8EA84F, 0x8EA89D, 0x8EA9A6, 0x8EAA25, 0x8EAB14, 0x8EAB6C, 0x8EAF13, 0x8EAF59, 0x8EB150, 0x8EB19F, 0x8EB296, 0x8EB2F8, 0x8EB338, 0x8EB372, 0x8EB43F, 0x8EB6CA, 0x8EB7C4, 0x8EBA6B, 0x8EBB1B, 0x8EBD20, 0x8EBD7A, 0x8EBF66, 0x8EC2F0, 0x8EC3FE, 0x8EC441, 0x8EC4DF, 0x8EC53F, 0x8EC599, 0x8EC693, 0x8EC78A, 0x8EC7D6, 0x8EC826, 0x8EC859, 0x8EC89A, 0x8ECA2C, 0x8ECBEB, 0x8ECC9F, 0x8ECEAF, 0x8ECF90, 0x8ECFD6, 0x8ED07E, 0x8ED0E2, 0x8ED27E, 0x8ED356, 0x8ED65F, 0x8ED6AF, 0x8ED6E4, 0x8ED74C, 0x8ED811, 0x8ED85D, 0x8ED894, 0x8ED8D6, 0x8EDB33, 0x8EDC55, 0x8EDCB1, 0x8EDF1B, 0x8EE00D, 0x8EE18E, 0x8EE214, 0x8EE337, 0x8EE38F, 0x8EE48F, 0x8EE4F0, 0x8EE543, 0x8EE5BA, 0x8EE68B, 0x8EE898, 0x8EE8F4, 0x8EE96A, 0x8EE9A8, 0x8EEA3B, 0x8EEB82, 0x8EEC5C, 0x8EECB9, 0x8EEDB7, 0x8EEEB9, 0x8EEFBE, 0x8EF093, 0x8EF0E0, 0x8EF143, 0x8EF1AA, 0x8EF1FF, 0x8EF25A, 0x8EF355, 0x8EF454, 0x8EF508, 0x8EF55A, 0x8EF666, 0x8EF743, 0x8EF9A9, 0x8EF9EA,
	# 880000
	0x8F8000, 0x8F8272, 0x8F83C4, 0x8F841F, 0x8F8450, 0x8F84A7, 0x8F8706, 0x8F87B4, 0x8F8A91, 0x8F8BC3, 0x8F8D0F, 0x8F8DF6, 0x8F8FBA, 0x8F9011, 0x8F9078, 0x8F9197, 0x8F930D, 0x8F93AD, 0x8F963D, 0x8F96E7, 0x8F9739, 0x8F97BF, 0x8F98F6, 0x8F99E9, 0x8F9A4E, 0x8F9C27, 0x8F9E16, 0x8F9EBC, 0x8F9F3A, 0x8F9FBE, 0x8FA004, 0x8FA119, 0x8FA1A6, 0x8FA6A3, 0x8FA7C9, 0x8FA89F, 0x8FAA8E, 0x8FAC4E, 0x8FAF95, 0x8FB160, 0x8FB35C, 0x8FB599, 0x8FB755, 0x8FB802, 0x8FB8ED, 0x8FBB04, 0x8FBDBA, 0x8FC003, 0x8FC5E8, 0x8FC761, 0x8FC966, 0x8FCCEB, 0x8FCE56, 0x8FCF63, 0x8FD097, 0x8FD219, 0x8FD3C4, 0x8FD680, 0x8FD682, 0x8FDD4A, 0x8FE0D6,
	# 888000
	0x908000, 0x908228, 0x90844E, 0x9086EF, 0x908729, 0x9087CD, 0x908A1F, 0x908EBB, 0x90912C, 0x9091A0, 0x909558, 0x90997D, 0x90A12A, 0x90A7FB, 0x90AB16, 0x90AF83, 0x90B67A, 0x90BB8D, 0x90C00B, 0x90C36E, 0x90C7A4, 0x90C9A6, 0x90CAB9, 0x90D058, 0x90D1EE, 0x90D325, 0x90D400, 0x90D63D, 0x90D6E7, 0x90D7BD, 0x90DBA6, 0x90DE92, 0x90E22C, 0x90E40C, 0x90E53B, 0x90E6FC, 0x90E750, 0x90E7F2, 0x90E893, 0x90E998, 0x90ECFD, 0x90F0A7,
	# 890000
	0x91AF56, 0x91B11D, 0x91B1D4, 0x91B1D6, 0x91B992, 0x91BBDC, 0x91BEC2, 0x91C014, 0x91C101, 0x91C321, 0x91C64F, 0x91C77E, 0x91C984, 0x91CD0A, 0x91CE63, 0x91CE84, 0x91D024, 0x91D055, 0x91D321, 0x91D4E1, 0x91D77A, 0x91D92D, 0x91DD48, 0x91DDDF, 0x91DE4A, 0x91DEB4, 0x91DF2B, 0x91DF94, 0x91DFF1, 0x91E093, 0x91E0E5, 0x91E150, 0x91E1EF, 0x918000, 0x918056, 0x9180A0, 0x9180F3, 0x91814D, 0x91817B, 0x918259, 0x9182A7, 0x918308, 0x918356, 0x9183C1, 0x91840F, 0x918467, 0x9184A5, 0x9184E1, 0x91852C, 0x918570, 0x9185C3, 0x91861F, 0x918680, 0x9186C5, 0x918714, 0x918748, 0x918788, 0x9187B3, 0x9187DE, 0x918809, 0x918834, 0x918858, 0x918885, 0x9188B2, 0x9188DF, 0x918905, 0x918930, 0x918955, 0x918982, 0x9189A4, 0x9189D0, 0x918A20, 0x918A68, 0x918A8C, 0x918AD4, 0x918AF8, 0x918B22, 0x918B48, 0x918B6F, 0x918B96, 0x918BBD, 0x918BE8, 0x918C21, 0x918C45, 0x918C75, 0x918CA5, 0x918CD5, 0x918D05, 0x918D35, 0x918D66, 0x918D8D, 0x918DB4, 0x918DDE, 0x918E04, 0x918E2F, 0x918E63, 0x918EB0, 0x918ED4, 0x918EFF, 0x918F29, 0x918F4D, 0x918F70, 0x918FA2, 0x918FC6, 0x918FEF, 0x919016, 0x91903A, 0x919060, 0x9190A6, 0x9190D7, 0x919101, 0x91912F, 0x919159, 0x919180, 0x9191B4, 0x9191D8, 0x91920A, 0x91923D, 0x91926F, 0x9192A1, 0x9192D4, 0x919328, 0x919378, 0x9193AA, 0x9193DA, 0x919404, 0x91942F, 0x918E2F, 0x919431, 0x919456, 0x919479, 0x91949F, 0x9194D3, 0x919509, 0x919539, 0x919562, 0x91958D, 0x9195AF, 0x9195D9, 0x91961B, 0x919641, 0x91966C, 0x919694, 0x9196B5, 0x9196E0, 0x919730, 0x919756, 0x919780, 0x9197A3, 0x9197C9, 0x9197CB, 0x9197CB, 0x9197EE, 0x919813, 0x919813, 0x91983A, 0x91985E, 0x918E04, 0x91958D, 0x919880, 0x9198A1, 0x9198C5, 0x919694, 0x9196E0, 0x9189FC, 0x918A44, 0x918A8C, 0x918AB0, 0x919702, 0x918BBD, 0x919756, 0x919780, 0x9197A3, 0x918F29, 0x918ED4, 0x9198E7, 0x919081, 0x91990A, 0x918E8E, 0x91993D, 0x919968, 0x9199AB, 0x9199E3, 0x919A28, 0x919A65, 0x919AA7, 0x919AF0, 0x919AF2, 0x919B3E, 0x919B91, 0x919BF3, 0x919BF5, 0x919C2E, 0x919C67, 0x919CA0, 0x919CD9, 0x919D0B, 0x919D3A, 0x919D5E, 0x919D99, 0x919DD2, 0x919DF1, 0x919E29, 0x919E5A, 0x919E88, 0x919EAF, 0x919EEF, 0x919F16, 0x919F3F, 0x919F79, 0x919FAB, 0x919FD5, 0x919FFE, 0x91A03A, 0x91A070, 0x91A0C0, 0x91A10C, 0x91A13F, 0x91A169, 0x91A1AB, 0x91A1EF, 0x91A226, 0x91A32E, 0x91A427, 0x91A5B6, 0x91912F, 0x918FEF, 0x91A5E5, 0x91A623, 0x91A653, 0x8EAB14, 0x918E2F, 0x918E2F, 0x91A683, 0x91A6B3, 0x91A6D8, 0x91A74F, 0x91A6FD, 0x91A72E, 0x91E238, 0x91E277, 0x91E2BF, 0x91E341, 0x91E474, 0x91E4D3, 0x91E53C, 0x91E5AE, 0x91E66F, 0x91E6F6, 0x91E785, 0x91E7E0, 0x91A787, 0x91A8AC, 0x91A967, 0x91AA4E, 0x91AB03, 0x91AD72, 0x91E412, 0x91E898, 0x91E8F6, 0x91E957, 0x91E9A7, 0x91EA01, 0x91EA43, 0x91EA9A, 0x91EAFF, 0x91EB6F, 0x91EBD7, 0x91EC38, 0x91ECC7, 0x91ED26, 0x91ED65, 0x91EDD2, 0x91EE51, 0x91EED2, 0x91EF2B, 0x91EF83, 0x91EFEB, 0x91F02E, 0x91F071,
	# 898000
	0x928000, 0x928478, 0x9288D7, 0x928C8D, 0x928CB2, 0x928DF1, 0x928F2E, 0x929026, 0x9290AF, 0x929107, 0x92917F, 0x929239, 0x9293C0, 0x92954F, 0x92960B, 0x92968F, 0x92973F, 0x9299BB, 0x929B05, 0x92A006, 0x92A053, 0x92A2BE, 0x92A4CF, 0x92A6DB
]

convert = [
	0x878000,
	0x880000,
	0x888000,
	0x890000,
	0x898000,
]

with open("../baserom.sfc", 'rb') as file:
	rom = bytearray(file.read())

for i in range(0, len(offsets) - 1):
	bank = (offsets[i] >> 16) - 142
	start = offsets[i] - convert[bank]
	size = 0

	# decompile dialogue script to calculate correct size
	while True:
		k = rom[start + size]
		if k == 0:
			size += 2
			cmd = rom[start + size - 1]
			if cmd == 0:
				break
			elif cmd == 0x01:
				pass
			elif cmd == 0x02:
				pass
			elif cmd == 0x05:
				pass
			elif cmd == 0x07:
				size += 2
			elif cmd == 0x0C:
				pass
			elif cmd == 0x10:
				pass
			elif cmd == 0x11:
				pass
			elif cmd == 0x12:
				pass
			elif cmd == 0x13:
				pass
			elif cmd == 0x14:
				pass
			elif cmd == 0x16:
				size += 2
			elif cmd == 0x17:
				size += 2
			elif cmd == 0x84:
				size += 2
			elif cmd == 0x85:
				size += 1
			elif cmd == 0x87:
				pass
			elif cmd == 0x88:
				size += 1
			elif cmd == 0x89:
				size += 2
			elif cmd == 0x8A:
				pass
			elif cmd == 0x8F:
				size += 1
			elif cmd == 0x92:
				size += 1
			elif cmd == 0x93:
				pass
			elif cmd == 0x94:
				size += 2
			else:
				raise ValueError("Error in dialogue{:03} {:x} at position {}".format(i, cmd, size))
		else:
			size += 1

	os.system("dd if=../baserom.sfc of=../text/dialogues/dialogue{:03}.bin skip={} count={} iflag=skip_bytes,count_bytes".format(i, start, size))
